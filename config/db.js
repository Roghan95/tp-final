require("dotenv").config();
const { Sequelize, DataTypes } = require("sequelize");
const fs = require("fs");
const path = require("path");

// Initialisation Sequelize avec PostgreSQL
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: parseInt(process.env.DB_PORT, 10),
    dialect: "postgres",
    logging: false, // Mettre √† `true` pour afficher les logs SQL dans la console
  }
);

// Liste des fichiers dans le dossier models
const modelsPath = path.join(__dirname, "../models");
const models = {}; // Objet pour stocker les mod√®les

fs.readdirSync(modelsPath)
  .filter((file) => file.endsWith(".model.js")) // Charger uniquement les mod√®les
  .forEach((file) => {
    const model = require(path.join(modelsPath, file))(sequelize, DataTypes);
    models[model.name] = model; // Ajouter le mod√®le dans l'objet `models`
  });

// Appliquer les associations (si elles existent)
Object.keys(models).forEach((modelName) => {
  if (models[modelName].associate) {
    models[modelName].associate(models);
  }
});

// Attacher les mod√®les √† Sequelize
sequelize.models = models;

// V√©rification de connexion
sequelize
  .authenticate()
  .then(() => {
    console.log("‚úÖ Connexion √† PostgreSQL r√©ussie !");
    console.log("üìå Mod√®les charg√©s :", Object.keys(models)); // V√©rifie que les mod√®les sont bien import√©s
  })
  .catch((err) => {
    console.error("‚ùå Erreur de connexion √† PostgreSQL :", err);
  });

// Synchronisation des mod√®les avec la DB
sequelize
  .sync({ force: true, alter: true }) // Mettre `alter: true` en prod pour √©viter la perte de donn√©es
  .then(() => {
    console.log("‚úÖ Les mod√®les sont synchronis√©s avec la base de donn√©es.");
  })
  .catch((error) => {
    console.error("‚ùå Impossible de synchroniser la base de donn√©es :", error);
  });

module.exports = { sequelize, models };
